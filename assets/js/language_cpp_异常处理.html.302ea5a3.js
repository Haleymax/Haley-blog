"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[2083],{6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},2499:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>h,data:()=>e});var n=a(641);const l=[(0,n.Fv)('<h1 id="c-异常机制" tabindex="-1"><a class="header-anchor" href="#c-异常机制"><span>C++异常机制</span></a></h1><h2 id="_1-c-异常机制概述" tabindex="-1"><a class="header-anchor" href="#_1-c-异常机制概述"><span>1. C++异常机制概述</span></a></h2><p>C++的异常情况主要分为两种，一种是编译时的语法错误，另一种是运行时的异常，例如访问越界，内存不足等。异常机制专用于处理运行时异常。异常事件在C++中表示为异常对象，异常事件发生时，程序使用<strong>throw</strong>关键字抛出异常对象，抛出点称为异常出现点，由操作系统为程序设置当前异常类型，然后执行程序的当前异常处理代码块，在包含了异常出现点的最内层的try块，依次匹配catch语句中的异常对象。若匹配成功，则执行<strong>catch</strong>块内的异常处理语句，然后接着执行<strong>try...catch...</strong> 块之后的代码。如果在当前的try...catch...块内找不到匹配该异常对象的catch语句，则由更外层的try...catch...块来处理该异常；如果当前函数内所有的try...catch...块内找不到匹配该异常对象的catch语句，则由更外层的try...catch...块来处理该异常；如果当前函数内所有的try...catch...块都不能匹配该异常，则递归回退到调用栈的上一层去处理该异常。如果一直回退到主函数main()都不能处理该异常，则递归回退到调用栈的上一层处理该异常。如果一直回退到主函数main()都不能处理该异常，则调用系统函数<strong>terminate()</strong> 终止程序。</p><h2 id="_2-try、throw、catch" tabindex="-1"><a class="header-anchor" href="#_2-try、throw、catch"><span>2. try、throw、catch</span></a></h2><p>throw与抛出表达式构成了throw语句，throw语句必须包含在try块中。如果在try语句块的程序段中（包括在其中调用的函数）发现了且抛出了该异常，则这个异常就可能被try语句块后的某个catch语句所捕获并处理，捕获和处理的条件是被抛出的异常对象的类型与catch语句的异常类型相匹配。</p><p>catch语句匹配被抛出的异常对象，如果catch语句的参数是引用类型，则该参数可直接作用于异常对象，即参数的改变也会改变异常对象，而且在catch中重新抛出异常时会继续传递这种改变。如果catch参数是传值的，则复制构造函数依据异常对象来构造catch参数对象。在该catch语句结束的时候，先析构catch参数对象，然后再析构异常对象。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">try</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(满足异常条件)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 异常对象;    </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(类型名 [形参名])</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //捕获特定类型的异常</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(类型名 [形参名])</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //捕获特定类型的异常</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(...)</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //三个点表示捕获所有类型的异常</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常处理示例：处理除数为0的异常，用try/catch语句来捕获异常，并使用throw语句来抛出异常。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&lt;iostream&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&lt;cstdlib&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;  </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{  </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(y </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {  </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> y;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     //除数为0，抛出异常  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }  </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> y;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     //否则返回两个数的商  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}  </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{  </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> res;  </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //定义异常  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {   </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> fuc</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      //出现异常，函数内部会抛出异常  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }  </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">             //捕获并处理异常  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">         cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;error of dividing zero.</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;  </span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">         exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">             //异常退出程序  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;The result of x / y is : &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-c-标准异常" tabindex="-1"><a class="header-anchor" href="#_3-c-标准异常"><span>3. C++标准异常</span></a></h2><p>C++标准库提供了一组异常类，用户可以在程序中使用这些标准的异常，也可以通过继承和重载exception类来定义新的异常。</p><p>下表是对每个标准异常类的简单说明：</p><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td>std::exception</td><td>该异常是所有标准 C++ 异常的父类</td></tr><tr><td>std::bad_alloc</td><td>该异常可以通过 new 抛出</td></tr><tr><td>std::bad_cast</td><td>该异常可以通过 dynamic_cast 抛出</td></tr><tr><td>std::bad_exception</td><td>这在处理 C++ 程序中无法预期的异常时非常有用</td></tr><tr><td>std::bad_typeid</td><td>该异常可以通过 typeid 抛出</td></tr><tr><td>std::logic_error</td><td>理论上可以通过读取代码来检测到的异常</td></tr><tr><td>std::domain_error</td><td>当使用了一个无效的数学域时，会抛出该异常</td></tr><tr><td>std::invalid_argument</td><td>当使用了无效的参数时，会抛出该异常</td></tr><tr><td>std::length_error</td><td>当创建了太长的 std::string 时，会抛出该异常</td></tr><tr><td>std::out_of_range</td><td>该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator</td></tr><tr><td>std::runtime_error</td><td>理论上不可以通过读取代码来检测到的异常</td></tr><tr><td>std::overflow_error</td><td>当发生数学上溢时，会抛出该异常</td></tr><tr><td>std::range_error</td><td>当尝试存储超出范围的值时，会抛出该异常</td></tr><tr><td>std::underflow_error</td><td>当发生数学下溢时，会抛出该异常</td></tr></tbody></table><p>下面是通过继承和重载 exception 类来定义新异常类的简单示例：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;exception&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> MyException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">exception</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> override</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // what()是异常类提供的一个公共方法，它能被所有子异常类重载。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;C++ Exception&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    try</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> MyException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (MyException </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">e)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;MyException caught&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">e)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-异常机制与构造函数" tabindex="-1"><a class="header-anchor" href="#_4-异常机制与构造函数"><span>4. 异常机制与构造函数</span></a></h2><p>构造函数没有返回值，应该使用异常机制来报告发生的问题。但构造函数抛出的异常表明构造函数没有执行完，不会生成特定的对象，对应的析构函数也不会自动被调用。因此在构造函数中抛出异常之前，需要先释放已经申请的资源。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">myClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">myClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(type t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(初始化值)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{ </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /*构造函数的函数体 */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">} </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> err) </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /* 构造函数的异常处理部分 */</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++不禁止析构函数向外界抛出异常，但一般来说析构函数不应该向外界函数抛出异常。析构函数中向外界抛出异常，将直接调用<strong>terminator()</strong> 系统函数终止程序。如果一个析构函数内部抛出了异常，就应该在析构函数的内部捕获并处理该异常，不能让异常抛出析构函数之外。可以如此处理：</p><ul><li><p>若析构函数内部抛出异常，调用std::abort()来终止程序。、</p></li><li><p>在析构函数中catch捕获异常并作处理。（别让异常逃离析构函数）</p></li></ul><h2 id="_5-异常处理需要注意的问题" tabindex="-1"><a class="header-anchor" href="#_5-异常处理需要注意的问题"><span>5. 异常处理需要注意的问题</span></a></h2><ul><li><p>如果抛出的异常在这一层try...catch..中没有被捕获，则会栈展开（栈解退）逐层往上传递，直至回退到主函数main()都不能处理该异常，则调用系统函数terminate()终止程序。</p></li><li><p>一般在异常抛出后资源可以正常释放，但注意如果在类的构造函数中抛出异常，系统是不会调用它的析构函数的，处理方法是：在构造函数中抛出异常之前，先删除申请的资源。</p></li><li><p>异常处理仅仅通过类型而不是通过值来匹配，所有catch块的参数可以没有参数名称，只需要参数类型。</p></li><li><p>函数原型中的异常说明要与实现中的异常说明一致，否则容易引起异常冲突。</p></li><li><p>在利用throw语句抛出异常对象时，throw会先通过拷贝构造函数构造一个新对象，然后将新对象传递给catch参数。如果catch参数采用值传递，会再一次调用拷贝构造函数，给catch参数赋值；如果是引用（或传地址/指针），则无需赋值处理，这样不仅会提高效率，还可以利用对象的多态性。</p></li><li><p>异常抛出的新对象并非创建在函数栈上，而是创建在专用的异常栈上，因此它才可以跨接多个函数而传递到上层，当异常对象与catch语句成功匹配上后，在该catch语句的结束处被自动析构。所有从try到throw语句之间的局部对象的析构函数将被自动调用。但如果一直上溯到main函数后还没有找到匹配的catch块，那么系统调用terminate()终止整个程序，这种情况下不能保证所有局部对象会被正确地销毁。</p></li><li><p>派生类的异常捕获要放到父类异常扑获的前面，否则，派生类的异常无法被捕获。编写异常说明时，要确保派生类成员函数的异常说明和基类成员函数的异常说明一致，即派生类改写的虚函数的异常说明至少要和对应的基类虚函数的异常说明相同，甚至更加严格，更特殊。</p></li><li><p>在栈展开的过程中，会依次调用局部对象的析构函数释放资源。为了避免内存泄漏的情况，应该采用RAII机制（Resource acquisition is initialization，资源获取即初始化），即以对象管理资源，把资源数据用对象封装起来。程序发生异常，执行栈展开时，封装了资源的对象会自动调用其析构函数以释放资源。C++中的智能指针便符合RAII机制。</p></li></ul><h2 id="_6-相关函数" tabindex="-1"><a class="header-anchor" href="#_6-相关函数"><span>6. 相关函数</span></a></h2><h3 id="_6-1-noexcept" tabindex="-1"><a class="header-anchor" href="#_6-1-noexcept"><span>6.1 noexcept</span></a></h3><p><code>noexcept</code> 是 C++11 引入的一个关键字，用于指定一个函数是否会抛出异常。它的使用有助于明确函数的异常安全性，允许编译器进行更多优化，并帮助提高程序的稳定性。以下是 <code>noexcept</code> 的详细说明和使用方法：</p><p><strong><code>noexcept</code> 的基本用法</strong></p><ol><li><strong>标记函数不抛出异常</strong> 使用 <code>noexcept</code> 可以标记一个函数不会抛出任何异常。如果函数被标记为 <code>noexcept</code>，编译器可以优化代码，因为它知道这个函数不会抛出异常。</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 函数 foo 不会抛出异常</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li><p><strong><code>noexcept</code> 规范的参数</strong><code>noexcept</code> 可以接受一个布尔常量表达式作为参数，指示该函数是否会抛出异常：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 表示 foo() 不会抛出异常</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 表示 bar() 可能会抛出异常</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><ul><li><code>noexcept(true)</code> 或省略 <code>noexcept</code> 表示函数不会抛出异常。</li><li><code>noexcept(false)</code> 表示函数可能抛出异常。</li></ul><p><strong>基本示例：</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;foo() will not throw exceptions&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;bar() might throw exceptions&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 这是安全的</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 这也是安全的</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 <code>noexcept</code> 进行优化</strong></p><p>当 <code>noexcept</code> 用于标记不会抛出异常的函数时，编译器可以做出更有力的优化。例如，在使用标准库的容器时，若容器知道某些操作不会抛出异常，可能会做出更高效的实现。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;vector&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> v;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    v</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 假设推送操作是 noexcept 的，编译器可以进行优化</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 <code>noexcept</code> 检查其他函数是否 noexcept</strong></p><p>C++11 引入了 <code>std::is_nothrow_invocable</code> 和 <code>std::is_nothrow_convertible</code> 类型特征，可以用来检查一个函数或表达式是否 <code>noexcept</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;type_traits&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::boolalpha;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;foo() noexcept: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::is_nothrow_invocable_v</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;decltype</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(foo)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;bar() noexcept: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::is_nothrow_invocable_v</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;decltype</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(bar)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在 Lambda 表达式中使用 <code>noexcept</code></strong></p><p>在 C++11 中，lambda 表达式可以通过 <code>noexcept</code> 指定是否会抛出异常：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lambda_noexcept </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> []() noexcept {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;This lambda will not throw exceptions&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lambda_may_throw </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> []() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;This lambda might throw exceptions&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    lambda_noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    lambda_may_throw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>与虚函数的兼容性</strong></p><p>当重写基类中的虚函数时，派生类中的函数也需要具有与基类函数相同的异常规范。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;exception&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">noexcept</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 纯虚函数，声明为 noexcept</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Derived</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">noexcept</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Derived foo() noexcept&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><ul><li><strong><code>noexcept</code></strong>：用于标记一个函数是否会抛出异常。如果一个函数被标记为 <code>noexcept</code>，编译器可以做出更有力的优化。</li><li><strong>布尔常量</strong>：<code>noexcept(true)</code> 表示函数不会抛出异常，<code>noexcept(false)</code> 表示函数可能抛出异常。</li><li><strong>类型特征</strong>：<code>std::is_nothrow_invocable</code> 和 <code>std::is_nothrow_convertible</code> 可用于检查函数是否 noexcept。</li></ul><p>通过合理使用 <code>noexcept</code>，可以提高程序的性能和异常安全性，并使代码更易于理解和维护。</p><h3 id="_6-2-what" tabindex="-1"><a class="header-anchor" href="#_6-2-what"><span>6.2 what()</span></a></h3><p>在 C++ 中，<code>what()</code> 函数是 <code>std::exception</code> 类中的一个虚函数，用于提供关于异常的描述信息。它通常被用来获取异常的字符串描述，这对于错误处理和调试非常有用。下面将详细解释 <code>what()</code> 函数的定义、用法以及如何使用它来创建自定义异常类。</p><p><strong>1.<code>what()</code> 函数的定义</strong></p><p><code>what()</code> 是 <code>std::exception</code> 类中的一个虚函数，定义如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> what</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> noexcept</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>返回值</strong>：<code>what()</code> 函数返回一个 <code>const char*</code> 类型的 C 风格字符串，这个字符串包含了异常的描述信息。</li><li><strong><code>noexcept</code></strong>：<code>what()</code> 函数被标记为 <code>noexcept</code>，表示它不会抛出异常。</li></ul><p><strong>2.使用 <code>what()</code> 函数</strong></p><p>通常，你会通过捕获异常并调用 <code>what()</code> 函数来获取异常的描述信息</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;stdexcept&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // For std::exception</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> mightThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">runtime_error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;An error occurred in mightThrow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        mightThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> e) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Caught exception: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>std::runtime_error</code> 是一个标准异常类，它继承自 <code>std::exception</code> 并重写了 <code>what()</code> 函数。<code>e.what()</code> 会返回 &quot;An error occurred in mightThrow&quot; 字符串，该字符串描述了异常的原因。</p><p><strong>3.自定义异常类</strong></p><p>你可以创建自己的异常类，继承自 <code>std::exception</code> 或其派生类，并重写 <code>what()</code> 函数以提供自定义的错误信息。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;exception&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;cstring&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // For std::strlen</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> MyException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> message;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> MyException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(msg) {}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> what</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> noexcept</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> message;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> MyException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Custom exception message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> e) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::cerr </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Caught exception: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">what</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>MyException</code> 类继承自 <code>std::exception</code> 并重写了 <code>what()</code> 函数，以返回自定义的错误信息。</p><p><strong>4.关键点</strong></p><ul><li><strong>继承自 <code>std::exception</code></strong>：如果你需要定义自定义异常类，应当继承自 <code>std::exception</code> 或其子类，并重写 <code>what()</code> 函数。</li><li><strong><code>what()</code> 返回 C 风格字符串</strong>：<code>what()</code> 函数返回的字符串是一个 C 风格字符串，你可以直接将其传递给输出流。</li><li><strong><code>noexcept</code> 说明</strong>：<code>what()</code> 函数标记为 <code>noexcept</code>，这意味着它不应抛出异常，这在异常处理中很重要，避免了进一步的异常处理复杂性。</li></ul><p><strong>总结</strong></p><p><code>what()</code> 函数是 C++ 异常处理机制中的一个重要部分，它提供了一个标准化的方法来获取异常的描述信息。通过重写 <code>what()</code> 函数，你可以自定义异常的行为，使得异常信息更具描述性和针对性。这对于调试和错误处理非常有帮助。</p><h3 id="_6-3-cerr" tabindex="-1"><a class="header-anchor" href="#_6-3-cerr"><span>6.3 cerr</span></a></h3><p>cerr 是 C++ 标准库中的一个预定义对象，属于 <code>std::ostream</code> 类，用于将错误信息输出到标准错误设备（stderr）。它是 C++ 中处理错误输出的一种机制，与标准输出流 std::cout 相对应，但有着不同的特性和用途。以下是对 cerr 函数的详细解释：</p><p><strong>1.cerr 的定义与类型</strong></p><ul><li><strong>定义</strong>：<code>std::cerr</code> 是 C++ 标准错误输出流，对应于 ISO C 标准库的 stderr。它是一个全局对象，用于将错误信息输出到标准错误设备。</li><li><strong>类型</strong>：<code>std::cerr</code> 是 <code>std::ostream</code> 类型的对象，因此它支持 <code>std::ostream</code> 类的所有成员函数和操作符，特别是 <code>&lt;&lt;</code> 操作符，用于向标准错误流中插入数据。</li></ul><p><strong>2.cerr 的特性</strong></p><ul><li><strong>无缓冲</strong>：默认情况下，cerr 的输出是不缓冲的。这意味着当使用 cerr 输出信息时，信息会立即被发送到标准错误设备，而不会被存储在缓冲区中等待后续输出。这一特性使得 cerr 非常适合用于输出紧急的、需要立即显示的信息，如错误消息。</li><li><strong>与 cout 的同步</strong>：虽然 cerr 默认是无缓冲的，但根据 ISO C++ 标准，cerr 被要求与 cout 同步。这意味着，在每次输出操作后，如果 cout 的缓冲区非空，cerr 会先强制刷新 cout 的缓冲区，然后再执行自己的输出操作。然而，这种同步行为可能会降低程序的性能，因此在实际应用中，如果不需要与 cout 同步，可以通过调用 <code>cerr.rdbuf()-&gt;pubsync()</code> 或 <code>cerr.rdbuf(0)</code> 来关闭同步。</li><li><strong>不常被重定向</strong>：与 cout 不同，cerr 通常不会被重定向到文件或其他输出目标。这是因为标准错误流通常用于显示对程序运行有重要影响的错误信息，这些信息应该直接显示在用户的控制台上，以便用户能够立即注意到并采取相应的措施。</li></ul><p><strong>3.cerr 的使用场景</strong></p><p>cerr 通常用于输出错误信息和其他不属于正常逻辑的输出内容。例如，在程序执行过程中遇到无法恢复的错误时，可以使用 cerr 输出错误消息，以便用户了解发生了什么问题。此外，cerr 还可以用于输出警告信息或其他重要的、需要用户注意的信息。</p>',73)],t={},h=(0,a(6262).A)(t,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),e=JSON.parse('{"path":"/language/cpp/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html","title":"C++异常机制","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-07-26T00:00:00.000Z","category":["C++"],"tag":["C++","异常"],"sticky":true,"order":1,"author":"Ms.Huang"},"headers":[{"level":2,"title":"1. C++异常机制概述","slug":"_1-c-异常机制概述","link":"#_1-c-异常机制概述","children":[]},{"level":2,"title":"2. try、throw、catch","slug":"_2-try、throw、catch","link":"#_2-try、throw、catch","children":[]},{"level":2,"title":"3. C++标准异常","slug":"_3-c-标准异常","link":"#_3-c-标准异常","children":[]},{"level":2,"title":"4. 异常机制与构造函数","slug":"_4-异常机制与构造函数","link":"#_4-异常机制与构造函数","children":[]},{"level":2,"title":"5. 异常处理需要注意的问题","slug":"_5-异常处理需要注意的问题","link":"#_5-异常处理需要注意的问题","children":[]},{"level":2,"title":"6. 相关函数","slug":"_6-相关函数","link":"#_6-相关函数","children":[{"level":3,"title":"6.1 noexcept","slug":"_6-1-noexcept","link":"#_6-1-noexcept","children":[]},{"level":3,"title":"6.2 what()","slug":"_6-2-what","link":"#_6-2-what","children":[]},{"level":3,"title":"6.3 cerr","slug":"_6-3-cerr","link":"#_6-3-cerr","children":[]}]}],"git":{"createdTime":1722604889000,"updatedTime":1722772314000,"contributors":[{"name":"haley","email":"huanghongweimax@163.com","commits":3}]},"readingTime":{"minutes":14.55,"words":4366},"filePathRelative":"language/cpp/异常处理.md","localizedDate":"2024年7月26日","excerpt":"\\n<h2>1. C++异常机制概述</h2>\\n<p>C++的异常情况主要分为两种，一种是编译时的语法错误，另一种是运行时的异常，例如访问越界，内存不足等。异常机制专用于处理运行时异常。异常事件在C++中表示为异常对象，异常事件发生时，程序使用<strong>throw</strong>关键字抛出异常对象，抛出点称为异常出现点，由操作系统为程序设置当前异常类型，然后执行程序的当前异常处理代码块，在包含了异常出现点的最内层的try块，依次匹配catch语句中的异常对象。若匹配成功，则执行<strong>catch</strong>块内的异常处理语句，然后接着执行<strong>try...catch...</strong> 块之后的代码。如果在当前的try...catch...块内找不到匹配该异常对象的catch语句，则由更外层的try...catch...块来处理该异常；如果当前函数内所有的try...catch...块内找不到匹配该异常对象的catch语句，则由更外层的try...catch...块来处理该异常；如果当前函数内所有的try...catch...块都不能匹配该异常，则递归回退到调用栈的上一层去处理该异常。如果一直回退到主函数main()都不能处理该异常，则递归回退到调用栈的上一层处理该异常。如果一直回退到主函数main()都不能处理该异常，则调用系统函数<strong>terminate()</strong> 终止程序。</p>"}')}}]);